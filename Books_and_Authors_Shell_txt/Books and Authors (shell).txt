//1 Create the Book class model
class Book(models.Model):
    author = models.ManyToManyField(Author, related_name="books")
    title = models.CharField(max_length=255)
    desc = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

//2 Create the Author class model
class Author(models.Model):
    first_name = models.CharField(max_length=255)
    last_name = models.CharField(max_length=255)
    note = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
	
//3 Create and run the migration files to create the tables in your database
py manage.py makemigrations
py manage.py migrate

//4 Query: Create 5 books with the following names: C Sharp, Java, Python, PHP, Ruby
Book.objects.create(title = "C Sharp")
Book.objects.create(title = "Java")
Book.objects.create(title = "Python")
Book.objects.create(title = "PHP")
Book.objects.create(title = "Ruby")

//5 Query: Create 5 different authors: Jane Austen, Emily Dickinson, Fyodor Dostoevsky, William Shakespeare, Lau Tzu
Author.objects.create(first_name = "Jane", last_name = "Austen")
Author.objects.create(first_name = "Emily", last_name = "Dickinson")
Author.objects.create(first_name = "Fyodor", last_name = "Dostoevsky")
Author.objects.create(first_name = "William", last_name = "Shakespeare")
Author.objects.create(first_name = "Lau", last_name = "Tzu")

//6 Add a new text field in the authors table called 'notes'
added it in the class then did the following commands
py manage.py makemigrations
py manage.py migrate

//7 Query: Change the name of the C Sharp book to C#
book_to_update = Book.objects.first()
book_to_update.title = "C#"
book_to_update.save()

//8 Query: Change the first name of the 4th author to Bill
fourth_author = Author.objects.get(id = 4)
fourth_author.first_name = "Bill"
fourth_author.save()

//9 Query: Assign the first author to the first 2 books
first_author = Author.objects.first()
first_book = Book.objects.first()
second_book = Book.objects.get(id = 2)
first_author.books.add(first_book)
first_author.books.add(second_book)

//10 Query: Assign the second author to the first 3 books
second_author = Author.objects.get(id = 2)
first_book = Book.objects.first()
second_book = Book.objects.get(id = 2)
third_book = Book.objects.get(id = 3)
second_author.books.add(first_book)
second_author.books.add(second_book)
second_author.books.add(third_book)

//11 Query: Assign the third author to the first 4 books
third_author = Author.objects.get(id = 3)
first_book = Book.objects.first()
second_book = Book.objects.get(id = 2)
third_book = Book.objects.get(id = 3)
fourth_book = Book.objects.get(id = 4)
third_author.books.add(first_book)
third_author.books.add(second_book)
third_author.books.add(third_book)

//12 Query: Assign the fourth author to the first 5 books (or in other words, all the books)
fourth_author = Author.objects.get(id = 4)
all_books = Book.objects.all()
fourth_author.books.add(all_books)

//13 Query: Retrieve all the authors for the 3rd book
third_book = Book.objects.get(id = 3)
third_book.authors.all()

//14 Query: Remove the first author of the 3rd book
third_book = Book.objects.get(id = 3)
third_book.authors.remove(id = 1)

//15 Query: Add the 5th author as one of the authors of the 2nd book
second_book = Book.objects.get(id = 2)
fifth_author = Author.objects.get(id = 5)
second_book.authors.add(fifth_author)

//16 Query: Find all the books that the 3rd author is part of
third_author = Author.objects.get(id = 3)
third_author.books.all()

//17 Query: Find all the authors that contributed to the 5th book
fifth_book = Book.objects.last()
fifth_book.authors.all()